@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

LAYOUT_WITH_LEGEND()

' === 사용자 정의 ===
Person(user, "일반 사용자", "송금 요청을 수행함")
Person(admin, "운영자", "탐지 룰 관리 및 모니터링")

System_Boundary(system, "FDS 시스템") {

  ' === API 레이어 ===
  Container(api, "API Server", "Spring Boot", "송금 API 및 인증 처리")
  Container(ws, "WebSocket Gateway", "Node.js or Spring", "실시간 이상 알림 전달")

  ' === DB 및 캐시 ===
  Container(rdb, "PostgreSQL", "Database", "트랜잭션 및 룰 변경 이력 저장")
  Container(redis_balance, "Redis (Balance)", "Redis", "잔액 캐시 및 Lua 기반 차감 처리")
  Container(redis_ttl, "Redis (TTL States)", "Redis", "5분 간 송금 카운터 등 상태 TTL 관리")
  Container(redis_rule, "Redis (Rules)", "Redis", "탐지 룰 캐시, 버전 정보, 룰 조회")

  ' === Kafka Consumers ===
  Container(txWorker, "TxWorker", "Kafka Consumer", "송금 이벤트 처리 및 RDB 저장")
  Container(riskEval, "RiskEval", "Kafka Consumer", "이상 거래 탐지 (룰 기반/AI)")
  Container(syncWorker, "SyncWorker", "Kafka Consumer", "DLQ 복구 및 TTL 상태 정합")

  ' === Admin 관련 ===
  Container(adminUI, "Admin UI", "React", "탐지 룰 등록, 조회 및 모니터링")
  Container(slack, "Slack", "Webhook", "운영자 알림 수신")

  ' === Kafka Topics ===
  ContainerQueue(initiatedTopic, "transfer.initiated", "Kafka Topic", "송금 요청 이벤트")
  ContainerQueue(createdTopic, "transfer.created", "Kafka Topic", "트랜잭션 저장 완료")
  ContainerQueue(flaggedTopic, "transfer.flagged", "Kafka Topic", "이상 거래 탐지 결과")
  ContainerQueue(syncRequiredTopic, "tx.sync_required", "Kafka Topic", "DLQ 복구 요청")
}

' === 사용자 플로우 ===
Rel(user, api, "송금 요청")
Rel(api, redis_balance, "잔액 차감 (Lua)")
Rel(api, redis_rule, "탐지 룰 저장")
Rel(api, initiatedTopic, "Produce")

Rel(initiatedTopic, txWorker, "Consume")
Rel(txWorker, rdb, "INSERT 트랜잭션")
Rel(txWorker, createdTopic, "Produce")

Rel(createdTopic, riskEval, "Consume")
Rel(riskEval, redis_rule, "탐지 룰 조회")
Rel(riskEval, redis_ttl, "TTL 상태 조회")
Rel(riskEval, flaggedTopic, "Produce")

Rel(flaggedTopic, ws, "실시간 경고 Push")
Rel(flaggedTopic, slack, "운영자 알림")

' === DLQ 흐름 ===
Rel(txWorker, syncRequiredTopic, "Produce on Failure", "dashed")
Rel(riskEval, syncRequiredTopic, "Produce on Failure", "dashed")
Rel(syncRequiredTopic, syncWorker, "Consume")
Rel(syncWorker, rdb, "복구 INSERT")
Rel(syncWorker, redis_ttl, "TTL 상태 복구")
Rel(syncWorker, slack, "DLQ 복구 결과 알림")

' === 운영자 플로우 ===
Rel(admin, adminUI, "탐지 룰 등록/수정")
Rel(adminUI, api, "POST /rules")
Rel(adminUI, redis_rule, "룰 상태 조회")

@enduml